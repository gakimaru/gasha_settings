#pragma once
#ifndef GASHA_INCLUDED_PROJECT_LAST_SETTINGS_H
#define GASHA_INCLUDED_PROJECT_LAST_SETTINGS_H

//--------------------------------------------------------------------------------
// build_settings/project_last_settings.h
// プロジェクト固有のコンパイル設定（最終設定）
//
// 依存するヘッダー：project_first_settings.h//プロジェクト固有のビルド設定（先行設定）
//                   compiler_auto_settings.h//コンパイラ自動判別・設定
//                   platform_auto_settings.h//プラットフォーム自動判別・設定
//                   language_auto_settings.h//言語機能自動判別・設定
//                   build_configuration.h//ビルド構成
//                   ※build_settings.h により、依存関係順にインクルード
//
// Gakimaru's standard library for C++ - GASHA
//   Copyright (c) 2014 Itagaki Mamoru
//   Released under the MIT license.
//     https://github.com/gakimaru/gasha_settings/blob/master/LICENSE
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
//※以下、プロジェクトの都合に合わせて設定を選択・変更して使用する。

//--------------------------------------------------------------------------------
//【重要設定】
//【多態アロケータ】
//※ライブラリの再ビルド必要

//【要注意】下記の設定を有効化することにより、標準new/deleteの置き換えがライブラリレベルで行われる。
//          他のライブラリや、プロジェクト固有の標準new/delete置き換えと競合する可能性があるので要注意。
//          本当に適用して良いか、きちんとプロジェクトの方針を固めてから使用すること。

#define GASHA_ENABLE_POLY_ALLOCATOR//多態アロケータおよびそれを適用した標準new/deleteを有効にする場合は、このマクロを有効にする。
                                   //※無効化しても多態アロケータの操作は可能だが、静的メンバーが削除され、何の効果も無い状態になる。

//--------------------------------------------------------------------------------
//【重要設定】
//【デバッガ用ブレークポイント割り込み】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

#define GASHA_DEBUGGER_BREAK_IS_AVAILABLE//デバッガのブレークポイントを使用した処理を有効化する場合、このマクロを有効化する
                                         //※ビルド構成で開発ツール／アサーションが無効な場合は、同時に無効化される

//--------------------------------------------------------------------------------
//【重要設定】
//【ログ出力操作】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_LOG_PRINT_USE_QUEUE//ログ出力操作時（print(), put(), GASHA_ASSERT(), GASHA_BREADPOINT(), GASHA_WATCHPOINT() 使用時）に、
                                 //ログキューを使用する場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【シンプルアサーション／ブレークポイント／ウォッチポイント】

//#define GASHA_SIMPLE_ASSERT_STDOUT stderr//シンプルアサーション／ブレークポイント／ウォッチポイントのメッセージの出力先
//※未定義時のデフォルトは adjust_build_settings.h に定義。

//--------------------------------------------------------------------------------
//【全体設定：TLS】

//#define GASHA_INCOMPLETE_TLS_INITIALIZER//TLSが正しく初期化できない環境であれば、このマクロを有効化する
                                          //※通常、プラットフォーム設定に応じて自動的に設定されるが、強制したい場合は設定する。
                                          //※このマクロが有効だと、TLSの初期値に 0 以外を要する一部の処理で、明示的な初期化を行うようになる。

//--------------------------------------------------------------------------------
//【全体設定：標準入出力】

#define GASHA_STDIN_IS_AVAILABLE//標準入力を使用した処理を有効化する場合、このマクロを有効化する

//--------------------------------------------------------------------------------
//【全体設定：SSE命令】
//※ライブラリの再ビルド必要

#ifdef GASHA_IS_X86//x86,x64系CPUの場合のみ設定可
	
	//#define GASHA_USE_SSE//SSE命令セットを使用する場合、このマクロを有効にする
	//#define GASHA_USE_SSE2//SSE2命令セットを使用する場合、このマクロを有効にする
	//#define GASHA_USE_SSE3//SSE3命令セットを使用する場合、このマクロを有効にする
	//#define GASHA_USE_SSE4A//SSE4a命令セット(AMD)を使用する場合、このマクロを有効にする
	//#define GASHA_USE_SSE4_1//SSE4.1命令セットを使用する場合、このマクロを有効にする
	//#define GASHA_USE_SSE4_2//SSE4.2命令セットを使用する場合、このマクロを有効にする
	#define GASHA_USE_POPCNT//POPCNT命令を使用する場合、このマクロを有効にする
	//#define GASHA_USE_AES//AES命令セットを使用する場合、このマクロを有効にする
	#define GASHA_USE_AVX//AVX命令セットを使用する場合、このマクロを有効にする
	//#define GASHA_USE_AVX2//AVX2命令セットを使用する場合、このマクロを有効にする
	//#define GASHA_USE_FMA4//FMA4命令セット(AMD)を使用する場合、このマクロを有効にする
	//#define GASHA_USE_FMA3//FMA3命令セット(INTEL)を使用する場合、このマクロを有効にする

	//※一つ一つ指定しなくても、使用するバージョン以前の命令セットは自動的に有効化される。
	//　ただし、以下の指定は他の命令セットの有効化に影響しないので、個別に有効化する必要がある。
	//　・SSE4A
	//　・POPCNT
	//　・AES
	//　・FMA4
	//　・FMA3

	//【注意】AVXを指定する場合、__m128 型と __m256 型でオーバーロードしている関数があるため、
	//        GCCではコンパイルオプションに -fabi-version= 4 以上（または 0 = 最新）を指定しないと、
	//        同じ型と見なされてオーバーロードに失敗するので注意。

#endif//GASHA_IS_X86

//--------------------------------------------------------------------------------
//【算術：基本算術】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//設定なし

//--------------------------------------------------------------------------------
//【算術：高速算術】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

#define GASHA_FAST_ARITH_USE_SSE//高速演算クラスでSSE命令を用いる場合、このマクロを有効にする（__m128=float対応）
                                //※GASHA_USE_SSE が有効化されている必要がある。

#define GASHA_FAST_ARITH_USE_SSE2//高速演算クラスでSSE2命令を用いる場合、このマクロを有効にする（__m128d=double対応）
                                 //※GASHA_USE_SSE2 が有効化されている必要がある。

#define GASHA_FAST_ARITH_USE_SSE4_1//高速演算クラスでSSE4.1命令を用いる場合、このマクロを有効にする（ベクトル演算の内積計算命令対応）
                                   //※GASHA_USE_SSE4_1 が有効化されている必要がある。

#define GASHA_FAST_ARITH_USE_AVX//高速演算クラスでAVX命令を用いる場合、このマクロを有効にする（__m256/__m256d対応）
                                //※GASHA_USE_AVX が有効化されている必要がある。

#define GASHA_FAST_ARITH_USE_RECIPROCAL_FOR_DIVISION//高速演算クラスで除算に逆数を用いる場合、このマクロを有効にする
                                                    //※このオプションの使用は非推奨。
                                                    //　効果が出る事もあるが、コンパイラの最適化の方が効果が大きいため、
                                                    //　下手に逆数を使って部分的に効率化しても十分な効果が得られないことが多い。
                                                    //※プラットフォームやコンパイラによっては効果が得られる可能性もあるため、検証が必要。

//#define GASHA_VECTOR_OPERATION_ALWAYS_USE_SSE4_1//ベクトル演算で常にSSE命令を用いる場合、このマクロを有効にする。
                                             //※SSE命令に対応した型である必要がある。（float[3] or float[4]）
                                             //※この指定が無効でも、明示的な高速演算（fastArith）時にはSSE命令が使用される。
                                             //※毎回float[3]の変換が発生するので、若干非効率。明示的な高速演算（fastArith）を使った方が確実。
                                             //※現在無効化しているのは、パフォーマンス比較のため。

//#define GASHA_MATRIX_OPERATION_ALWAYS_USE_SSE4_1//行列演算で常にSSE命令を用いる場合、このマクロを有効にする。
                                             //※SSE命令に対応した型である必要がある。（float[3] or float[4]）
                                             //※現在無効化しているのは、パフォーマンス比較のため。

//--------------------------------------------------------------------------------
//【算術：CRC32】
//※ライブラリの再ビルド必要

#define GASHA_CRC32_IS_CRC32C//CRC32計算（多項式）を、CRC-32C(Castagnoli)にする場合、このマクロを有効にする
                             //※無効化時は、標準的なIEEE802.3のCRC-32を使用する。
                             //※CRC-32Cの方が衝突の機会が少なく優れている。

#define GASHA_CRC32_USE_SSE//CRC32計算にSSE4.2命令を使用する場合、このマクロを有効にする
                           //※SSE4.2命令により、CRC32計算が高速化される。
                           //※SSE命令はCRC-32C専用である点に注意。
                           //※GASHA_CRC32_IS_CRC32C が有効である必要がある。
                           //※GASHA_USE_SSE4_2 が有効化されている必要がある。

#define GASHA_CRC32_USE_STATIC_TABLE//CRC32計算に、事前計算済みの多項式テーブルを用いる場合、このマクロを有効にする
                                    //※4×256=1024バイトのメモリを要するが、高速に処理できる。
                                    //※CRC-32C有効化＋SSE4.2使用時は、このマクロの指定に関係なく、
                                    //　ランタイム時にはSSE命令を使用する（その方が高速）

//--------------------------------------------------------------------------------
//【文字列：高速文字列】
//※ライブラリの再ビルド必要

#define GASHA_FASE_STRING_USE_SSE4_2//高速文字列処理にSSE4.2命令を使用する場合、このマクロを有効にする
                                    //※SSE4.2命令により、文字列比較／コピー処理が高速化される。
                                    //※GASHA_USE_SSE4_2 が有効化されている必要がある。

//※コンパイラによっては効果が出ない関数もあるため、検証の上、効果のある関数だけ有効化した方が良い

#define GASHA_STRLEN_FAST_USE_SSE4_2//strlen_fast にSSE4.2命令を使用する場合、このマクロを有効にする
#define GASHA_STRNLEN_FAST_USE_SSE4_2//strnlen_fast にSSE4.2命令を使用する場合、このマクロを有効にする
#define GASHA_STRCMP_FAST_USE_SSE4_2//strcmp_fast にSSE4.2命令を使用する場合、このマクロを有効にする
#define GASHA_STRNCMP_FAST_USE_SSE4_2//strcmp_fast にSSE4.2命令を使用する場合、このマクロを有効にする
#define GASHA_STRCHR_FAST_USE_SSE4_2//strchr_fast にSSE4.2命令を使用する場合、このマクロを有効にする
#define GASHA_STRRCHR_FAST_USE_SSE4_2//strrchr_fast にSSE4.2命令を使用する場合、このマクロを有効にする
#define GASHA_STRSTR_FAST_USE_SSE4_2//strstr_fast にSSE4.2命令を使用する場合、このマクロを有効にする
#define GASHA_STRSTRBM_FAST_USE_SSE4_2//strstrbm_fast にSSE4.2命令を使用する場合、このマクロを有効にする
#define GASHA_STRSTR0_FAST_USE_SSE4_2//strstr0_fast にSSE4.2命令を使用する場合、このマクロを有効にする
#define GASHA_STRCPY_FAST_USE_SSE4_2//strcpy_fast にSSE4.2命令を使用する場合、このマクロを有効にする
#define GASHA_STRNCPY_FAST_USE_SSE4_2//strcpy_fast にSSE4.2命令を使用する場合、このマクロを有効にする

//#define GASHA_SSE_STRNCPY_PADDING_ZERO//sse_strncpyを本来の仕様（余りを0で埋める）で実装する場合は、このマクロを有効化する
                                        //※無効化時は、最後にターミネータを一つ付加するだけ（高速）

//--------------------------------------------------------------------------------
//【汎用ユーティリティ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_SWAP_VALUES_USE_MEMCPY//swapValues/rotateValues関数でstd::memcpy()を使用する場合、このマクロを有効化する ※通常はムーブコンストラクタ／ムーブオペレータ使用

//--------------------------------------------------------------------------------
//【時間処理ユーティリティ】
//※ライブラリの再ビルド必要

//#define GASHA_TIME_TYPE dobule//経過時間計算用の「秒数型」

//※未定義時のデフォルトは adjust_build_settings.h に定義。

//--------------------------------------------------------------------------------
//【アルゴリズム：ソート】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_QUICK_SORT_USE_RECURSIVE_CALL//クイックソートの再帰処理版を使用にする場合は、このマクロを有効にする

//#define GASHA_RADIX_SORT_USE_RECURSIVE_CALL//基数ソートの再帰処理版を使用にする場合は、このマクロを有効にする

#ifdef _OPENMP//OpenMP有効時

	#define GASHA_ODD_EVEN_SORT_USE_OPENMP//奇遇転置ソート：OpenMPを使用する場合は、このマクロを有効にする

	#define GASHA_SHEAR_SORT_USE_OPENMP//シェアソート：OpenMPを使用する場合は、このマクロを有効にする
	//#define GASHA_SHEAR_SORT_USE_OPENMP_NEST//シェアソート：OpenMPのparallelの入れ子処理を使用する場合は、このマクロを有効にする ※有効にするとかえって遅くなる、もしくは、正常に動作しない

	//#define GASHA_INPLACE_MERGE_SORT_USE_OPENMP//インプレースマージソート：OpenMPを使用する場合は、このマクロを有効にする ※有効にすると遅くなることがある

	//#define GASHA_QUICK_SORT_USE_OPENMP//クイックソート：OpenMPを使用する場合は、このマクロを有効にする ※有効にするとかえって遅くなる

#endif//_OPENMP

//--------------------------------------------------------------------------------
//【ロック】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_DEFAULT_CONTEXT_SWITH_IS_ZERO_SLEEP//デフォルトコンテキストスイッチで、ゼロスリープでスイッチを使用する場合は、このマクロを有効にする
//#define GASHA_DEFAULT_CONTEXT_SWITH_IS_SHORT_SLEEP//デフォルトコンテキストスイッチで、短いスリープでスイッチを使用する場合は、このマクロを有効にする
//#define GASHA_DEFAULT_CONTEXT_SWITH_IS_FORCE//デフォルトコンテキストスイッチで、確実なスイッチを使用する場合は、このマクロを有効にする
//#define GASHA_DEFAULT_CONTEXT_SWITH_IS_YIELD//デフォルトコンテキストスイッチで、イールドを使用する場合は、このマクロを有効にする（優先度の同じスレッドにしか処理を渡さないので注意）
//※どれも指定しない場合は、GASHA_DEFAULT_CONTEXT_SWITH_IS_SHORT_SLEEP がデフォルト

//--------------------------------------------------------------------------------
//【スタックアロケータ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_STACK_ALLOCATOR_ENABLE_ASSERTION//メモリ確保／破棄時のアサーションを有効にする場合は、このマクロを有効にする
                                                //※有効化すると、メモリ不足時にアサーションが出るようになるので注意（無効時は黙って nullptr を返す）
                                                //※なお、nullptrの解放は、この設定に関係なく、常に成功扱い

#define GASHA_STACK_ALLOCATOR_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//※アロケータ系クラスは、明示的なインスタンス化を行うと、競合が起こり易くなるので注意。
//　クラスがあまり大きくないので、.cpp.h を常にインクルードし、明示的なインスタンス化を行わない方が無難。

//--------------------------------------------------------------------------------
//【ロックフリースタックアロケータ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_LF_STACK_ALLOCATOR_ENABLE_ASSERTION//メモリ確保／破棄時のアサーションを有効にする場合は、このマクロを有効にする
                                                   //※有効化すると、メモリ不足時にアサーションが出るようになるので注意（無効時は黙って nullptr を返す）
                                                   //※なお、nullptrの解放は、この設定に関係なく、常に成功扱い

#define GASHA_LF_STACK_ALLOCATOR_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//※アロケータ系クラスは、明示的なインスタンス化を行うと、競合が起こり易くなるので注意。
//　クラスがあまり大きくないので、.cpp.h を常にインクルードし、明示的なインスタンス化を行わない方が無難。

//--------------------------------------------------------------------------------
//【双方向スタックアロケータ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_DUAL_STACK_ALLOCATOR_ENABLE_ASSERTION//メモリ確保／破棄時のアサーションを有効にする場合は、このマクロを有効にする
                                                     //※有効化すると、メモリ不足時にアサーションが出るようになるので注意（無効時は黙って nullptr を返す）
                                                     //※なお、nullptrの解放は、この設定に関係なく、常に成功扱い

#define GASHA_DUAL_STACK_ALLOCATOR_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//※アロケータ系クラスは、明示的なインスタンス化を行うと、競合が起こり易くなるので注意。
//　クラスがあまり大きくないので、.cpp.h を常にインクルードし、明示的なインスタンス化を行わない方が無難。

//--------------------------------------------------------------------------------
//【ロックフリー双方向スタックアロケータ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_LF_DUAL_STACK_ALLOCATOR_ENABLE_ASSERTION//メモリ確保／破棄時のアサーションを有効にする場合は、このマクロを有効にする
                                                        //※有効化すると、メモリ不足時にアサーションが出るようになるので注意（無効時は黙って nullptr を返す）
                                                        //※なお、nullptrの解放は、この設定に関係なく、常に成功扱い

#define GASHA_LF_DUAL_STACK_ALLOCATOR_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//※アロケータ系クラスは、明示的なインスタンス化を行うと、競合が起こり易くなるので注意。
//　クラスがあまり大きくないので、.cpp.h を常にインクルードし、明示的なインスタンス化を行わない方が無難。

//--------------------------------------------------------------------------------
//【単一アロケータ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_MONO_ALLOCATOR_ENABLE_ASSERTION//メモリ確保／破棄時のアサーションを有効にする場合は、このマクロを有効にする
                                               //※有効化すると、メモリ不足時にアサーションが出るようになるので注意（無効時は黙って nullptr を返す）
                                               //※なお、nullptrの解放は、この設定に関係なく、常に成功扱い

#define GASHA_MONO_ALLOCATOR_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//※アロケータ系クラスは、明示的なインスタンス化を行うと、競合が起こり易くなるので注意。
//　クラスがあまり大きくないので、.cpp.h を常にインクルードし、明示的なインスタンス化を行わない方が無難。

//--------------------------------------------------------------------------------
//【ロックフリー単一アロケータ】
//※ライブラリの再ビルド必要

//#define GASHA_LF_MONO_ALLOCATOR_ENABLE_ASSERTION//メモリ確保／破棄時のアサーションを有効にする場合は、このマクロを有効にする
                                                  //※有効化すると、メモリ不足時にアサーションが出るようになるので注意（無効時は黙って nullptr を返す）
                                                  //※なお、nullptrの解放は、この設定に関係なく、常に成功扱い

//--------------------------------------------------------------------------------
//【プールアロケータ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_POOL_ALLOCATOR_ENABLE_ASSERTION//メモリ確保／破棄時のアサーションを有効にする場合は、このマクロを有効にする
                                               //※有効化すると、メモリ不足時にアサーションが出るようになるので注意（無効時は黙って nullptr を返す）
                                               //※なお、nullptrの解放は、この設定に関係なく、常に成功扱い

#define GASHA_POOL_ALLOCATOR_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//※アロケータ系クラスは、明示的なインスタンス化を行うと、競合が起こり易くなるので注意。
//　クラスがあまり大きくないので、.cpp.h を常にインクルードし、明示的なインスタンス化を行わない方が無難。

//--------------------------------------------------------------------------------
//【ロックフリープールアロケータ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_LF_POOL_ALLOCATOR_ENABLE_ASSERTION//メモリ確保／破棄時のアサーションを有効にする場合は、このマクロを有効にする
                                                  //※有効化すると、メモリ不足時にアサーションが出るようになるので注意（無効時は黙って nullptr を返す）
                                                  //※なお、nullptrの解放は、この設定に関係なく、常に成功扱い

#define GASHA_LF_POOL_ALLOCATOR_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//※アロケータ系クラスは、明示的なインスタンス化を行うと、競合が起こり易くなるので注意。
//　クラスがあまり大きくないので、.cpp.h を常にインクルードし、明示的なインスタンス化を行わない方が無難。

//--------------------------------------------------------------------------------
//【標準アロケータ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_STD_ALLOCATOR_ENABLE_ASSERTION//メモリ確保／破棄時のアサーションを有効にする場合は、このマクロを有効にする
                                              //※有効化すると、メモリ不足時にアサーションが出るようになるので注意（無効時は黙って nullptr を返す）
                                              //※なお、nullptrの解放は、この設定に関係なく、常に成功扱い

#define GASHA_STD_ALLOCATOR_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//※アロケータ系クラスは、明示的なインスタンス化を行うと、競合が起こり易くなるので注意。
//　クラスがあまり大きくないので、.cpp.h を常にインクルードし、明示的なインスタンス化を行わない方が無難。

//--------------------------------------------------------------------------------
//多態アロケータ対応標準new/delete
//※ライブラリの再ビルド必要

#define GASHA_STD_NEW_DELETE_USE_STD_ALLOCATOR_WHEN_POLY_ALLOCATOR_BROKEN//標準new/delete実行時に、多態アロケータが壊れていたら標準アロケータを使用するようにする場合、このマクロを有効にする
                                                                         //※このマクロが無効の場合、多態アロケータが壊れていたら、new/deleteに失敗する

//--------------------------------------------------------------------------------
//【マルチスレッド共有データ：共有スタック】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_SHARED_STACK_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【マルチスレッド共有データ：共有キュー】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_SHARED_QUEUE_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【マルチスレッド共有データ：ロックフリースタック】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_LF_STACK_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【マルチスレッド共有データ：ロックフリーキュー】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_LF_QUEUE_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【コンテナ：動的配列コンテナ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_DYNAMIC_ARRAY_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【コンテナ：リングバッファコンテナ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_RING_BUFFER_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【コンテナ：双方向連結リストコンテナ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

#define GASHA_LINKED_LIST_ENABLE_RANDOM_ACCESS_INTERFACE//コンテナのランダムアクセスインターフェースを有効にする場合は、このマクロを有効化する
#define GASHA_LINKED_LIST_ENABLE_BINARY_SEARCH//コンテナの二分探索メソッドを有効にする場合は、このマクロを有効にする
//#define GASHA_LINKED_LIST_ENABLE_STABLE_SORT//安定ソートメソッドを有効にする場合は、このマクロを有効にする
//#define GASHA_LINKED_LIST_USE_SHELL_SORT//通常ソートにシェルソートを使用する場合は、このマクロを有効にする（無効化時は挿入ソートを使用）

//#define GASHA_LINKED_LIST_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【コンテナ：片方向連結リストコンテナ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

#define GASHA_SINGLY_LINKED_LIST_ENABLE_RANDOM_ACCESS_INTERFACE//コンテナのランダムアクセスインターフェースを有効にする場合は、このマクロを有効化する
#define GASHA_SINGLY_LINKED_LIST_ENABLE_REVERSE_ITERATOR//リバースイテレータを有効にする場合は、このマクロを有効にする【注意】かなりの低速処理
#define GASHA_SINGLY_LINKED_LIST_ENABLE_BINARY_SEARCH//コンテナの二分探索メソッドを有効にする場合は、このマクロを有効にする ※リバースイテレータ無効化時は無効
//#define GASHA_SINGLY_LINKED_LIST_ENABLE_STABLE_SORT//安定ソートメソッドを有効にする場合は、このマクロを有効にする

//#define GASHA_SINGLY_LINKED_LIST_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【コンテナ：赤黒木コンテナ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

#define GASHA_RB_TREE_ENABLE_RANDOM_ACCESS_INTERFACE//コンテナのランダムアクセスインターフェースを有効にする場合は、このマクロを有効化する

//#define GASHA_RB_TREE_DISABLE_COLOR_FOR_ADD//ノード追加時の色操作と回転処理を無効にする場合は、このマクロを有効にする
//#define GASHA_RB_TREE_DISABLE_COLOR_FOR_REMOVE//ノード削除時の色操作と回転処理を無効にする場合は、このマクロを有効にする
//#define GASHA_RB_TREE_USE_DEBUG_PRINT_FOR_ADD//ノード追加時のデバッグ情報表示を使用する場合は、このマクロを有効にする
//#define GASHA_RB_TREE_USE_DEBUG_PRINT_FOR_REMOVE//ノード削除時のデバッグ情報表示を使用する場合は、このマクロを有効にする

//#define GASHA_RB_TREE_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【コンテナ：開番地法ハッシュテーブルコンテナ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

#define GASHA_HASH_TABLE_ENABLE_RANDOM_ACCESS_INTERFACE//コンテナのランダムアクセスインターフェースを有効にする場合は、このマクロを有効化する
#define GASHA_HASH_TABLE_ENABLE_REVERSE_ITERATOR//リバースイテレータを有効にする場合は、このマクロを有効にする

//#define GASHA_HASH_TABLE_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【コンテナ：二分ヒープコンテナ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

#define GASHA_BINARY_HEAP_ENABLE_RANDOM_ACCESS_INTERFACE//コンテナのランダムアクセスインターフェースを有効にする場合は、このマクロを有効化する
#define GASHA_BINARY_HEAP_ENABLE_REVERSE_ITERATOR//リバースイテレータを有効にする場合は、このマクロを有効にする

//#define GASHA_BINARY_HEAP_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【コンテナ：優先度付きキューコンテナアダプタ】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_PRIORITY_QUEUE_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【コンソール】
//※ライブラリの再ビルド必要

#define GASHA_USE_WINDOWS_CONSOLE//Windowsコマンドプロンプトを使用する場合、このマクロを有効にする（無効にした場合、カラーが扱えなくなるだけで、コンソール出力ができないことはない）
#define GASHA_USE_VS_CONSOLE//Visual Studio の出力ウインドウを使用する場合、このマクロを有効にする（無効にした場合、コマンドプロンプトに出力される）

//--------------------------------------------------------------------------------
//【メモリコンソール】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

//#define GASHA_MEM_CONSOLE_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//#define GASHA_STD_MEM_CONSOLE_BUFF_SIZE 4096//標準メモリコンソールのバッファサイズ
//※変更したい場合、このマクロを任意に設定する。
//※未定義時のデフォルトは adjust_build_settings.h に定義。
//※もっと大きなサイズのメモリコンソールを使用したい場合、このサイズを大きくするよりも、新たにメモリコンソールを割り当てた方が良い。

//--------------------------------------------------------------------------------
//【コンソールカラー】
//※ライブラリの再ビルド必要

#define GASHA_USE_ESCAPE_SEQUENCE//エスケープシーケンスを使用する場合、このマクロを有効にする
#define GASHA_USE_WINDOWS_CONSOLE_COLOR//Windowsコマンドプロンプトのカラーを使用する場合、このマクロを有効にする

//--------------------------------------------------------------------------------
//【ログレベル】
//※ライブラリの再ビルド必要

#define GASHA_LOG_LEVEL_CONTAINER_SECURE_INITIALIZE//ログレベル使用時に確実にコンテナを初期化したい場合は、このマクロを有効にする
                                                   //※ログレベルの明示的な初期化が不要になる。
                                                   //※パフォーマンスに問題がある場合はこのマクロを無効にすること。
                                                   //　その場合、最初のログレベル使用前に、コンテナの明示的な初期化が必要。

//--------------------------------------------------------------------------------
//【ログカテゴリ】
//※ライブラリの再ビルド必要

#define GASHA_LOG_CATEGORY_CONTAINER_SECURE_INITIALIZE//ログカテゴリ使用時に確実にコンテナを初期化したい場合は、このマクロを有効にする
                                                      //※ログカテゴリの明示的な初期化が不要になる。
                                                      //※パフォーマンスに問題がある場合はこのマクロを無効にすること。
                                                      //　その場合、最初のログカテゴリ使用前に、コンテナの明示的な初期化が必要。

//#define GASHA_LOG_CATEGORY_NUM 64//ログカテゴリの数
//※変更したい場合、このマクロを任意に設定する。
//※未定義時のデフォルトは adjust_build_settings.h に定義。
//※ログカテゴリは、メモリを節約したい場合や、もっと多くのカテゴリを使いたい場合に変更することができる。

//--------------------------------------------------------------------------------
//【ログレベルマスク】
//※ライブラリの再ビルド必要

#define GASHA_LOG_MASK_SECURE_INITIALIZE//ログレベルマスク使用時に確実にグローバルログレベルマスクを初期化したい場合は、このマクロを有効にする
                                        //※ログレベルマスクの明示的な初期化が不要になる。
                                        //※パフォーマンスに問題がある場合はこのマクロを無効にすること。
                                        //　その場合、最初のログレベルマスク使用前に、明示的な初期化が必要。

//#define GASHA_DEFAULT_LOG_MASK_OF_LOG 3//デフォルトのログレベルマスク
//#define GASHA_DEFAULT_LOG_MASK_OF_NOTICE 9//デフォルトの画面通知ログレベルマスク

//※それぞれ変更したい場合、このマクロを任意に設定する。
//※未定義時のデフォルトは adjust_build_settings.h に定義。
//※ログレベルマスク：
//  1  ... asDetail：   詳細／冗長メッセージ
//  3  ... asNormal：   通常メッセージ
//  5  ... asImportant：重要メッセージ
//  7  ... asWarning：  警告メッセージ
//  9  ... asCritical： 重大メッセージ
//  11 ... asAbsolute： 絶対メッセージ
//  12 ... asSilentAbsolutely：絶対静寂（表示しない）
//　詳しくは default_log_level.h を参照。

//--------------------------------------------------------------------------------
//【ログ属性】
//※ライブラリの再ビルド必要

#define GASHA_LOG_ATTR_SECURE_INITIALIZE//ログ属性使用時に確実にグローバルログ属性を初期化したい場合は、このマクロを有効にする
                                        //※ログ属性の明示的な初期化が不要になる。
                                        //※パフォーマンスに問題がある場合はこのマクロを無効にすること。
                                        //　その場合、最初のログ属性使用前に、明示的な初期化が必要。

//#define GASHA_DEFAULT_LOG_ATTR 0x0000//デフォルトのログ属性

//※変更したい場合、このマクロを任意に設定する。
//※未定義時のデフォルトは adjust_build_settings.h に定義。
//※ログ属性に関する詳細は、log_attr.h を参照。

//--------------------------------------------------------------------------------
//【ログワークバッファ】
//※ライブラリの再ビルド必要

#define GASHA_LOG_WORK_BUFF_SECURE_INITIALIZE//ログワークバッファ使用時に確実に初期化したい場合は、このマクロを有効にする
                                             //※ログワークバッファの明示的な初期化が不要になる。
                                             //※パフォーマンスに問題がある場合はこのマクロを無効にすること。
                                             //　その場合、最初のログワークバッファ使用前に、明示的な初期化が必要。

//#define GASHA_LOG_WORK_BUFF_BLOCK_SIZE 4096//ログ出力用ワークバッファ一つ当たりのサイズ
//#define GASHA_LOG_WORK_BUFF_POOL_SIZE 4//ログ出力用ワークバッファのプール数

//※ GASHA_LOG_WORK_BUFF_BLOCK_SIZE が1回のログ出力時の上限サイズとなる。
//※ GASHA_LOG_WORK_BUFF_BLOCK_SIZE * GASHA_LOG_WORK_BUFF_POOL_SIZE のサイズの固定ワークバッファが確保される。
//※未定義時のデフォルトは adjust_build_settings.h に定義。

//--------------------------------------------------------------------------------
//【ログキュー】
//※ライブラリの再ビルド必要

#define GASHA_LOG_QUEUE_SECURE_INITIALIZE//ログキュー使用時に確実に初期化したい場合は、このマクロを有効にする
                                         //※ログキューの明示的な初期化が不要になる。
                                         //※パフォーマンスに問題がある場合はこのマクロを無効にすること。
                                         //　その場合、最初のログキュー使用前に、明示的な初期化が必要。

//#define GASHA_LOG_QUEUE_MESSAGE_STACK_SIZE 32768//ログキューメッセージ用スタックバッファサイズ
//#define GASHA_LOG_QUEUE_NODE_SIZE 256//ログキュー用のノード数
//#define GASHA_LOG_QUEUE_NOWAIT//ログのキューイングができない時にメッセージを捨てる場合は、このマクロを有効にする
                                //※通常は、キューイング可能な状態になるまで待機する。

//※ GASHA_LOG_QUEUE_MESSAGE_STACK_SIZE は、キューに保持可能なメッセージの最大合計サイズ。（スマートスタックアロケータにより、溜まっているキューが全て出力されたらクリアされる）
//※ GASHA_LOG_QUEUE_NODE_SIZE は、同時にキューイング可能な数。
//※未定義時のデフォルトは adjust_build_settings.h に定義。

//--------------------------------------------------------------------------------
//【ログキューモニター】
//※ライブラリの再ビルド必要

#define GASHA_LOG_QUEUE_MONITOR_SECURE_INITIALIZE//ログキューモニター使用時に確実に初期化したい場合は、このマクロを有効にする
                                                 //※ログキューの明示的な初期化が不要になる。
                                                 //※パフォーマンスに問題がある場合はこのマクロを無効にすること。
                                                 //　その場合、最初のログキュー使用前に、明示的な初期化が必要。

//#define GASHA_LOG_QUEUE_MONITOR_MAX_RETRY_COUNT 256//次のIDのキューが来ない時にリトライ（待機）する最大回数
//※未定義時のデフォルトは adjust_build_settings.h に定義。

//--------------------------------------------------------------------------------
//【プロファイラー】
//※ライブラリの再ビルド必要

#define GASHA_PROFILER_SECURE_INITIALIZE//プロファイラー使用時に確実にコンテナを初期化したい場合は、このマクロを有効にする
                                        //※プロファイラーの明示的な初期化が不要になる。
                                        //※パフォーマンスに問題がある場合はこのマクロを無効にすること。
                                        //　その場合、最初のプロファイラー使用前に、明示的な初期化が必要。

//#define GASHA_PROFILER_STR_POOL_BUFF_SIZE 8192//文字列プールバッファサイズ（バイト数） ※全スレッド名＋全処理名を登録
//#define GASHA_PROFILER_STR_POOL_TABLE_SIZE 1024//文字列プールテーブルサイズ（個数） ※全スレッド名＋全処理名を登録
//#define GASHA_PROFILER_PROFILE_INFO_POOL_SIZE 2048//プロファイル情報プールサイズ（個数） ※全スレッドの全処理の処理時間計測結果を記録
//#define GASHA_PROFILER_THREAD_INFO_TABLE_SIZE 64//スレッド情報テーブルサイズ（個数） ※全スレッドのスレッド情報を記録
//※未定義時のデフォルトは adjust_build_settings.h に定義。

//--------------------------------------------------------------------------------
//【シングルトンデバッグ用処理】
//※ライブラリの再ビルド必要

//#define GASHA_SINGLETON_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【シングルトンデバッグ用処理】
//※ライブラリの再ビルド不要（ただし、ライブラリ内で使用している可能性があるため、できるだけ再ビルドした方が良い）

#define GASHA_SINGLETON_DEBUG_ENABLED//シングルトンデバッグ用処理を有効にする場合は、このマクロを有効にする
                                     //※デバッグ機能有効時（GASHA_DEBUG_FEATURE_IS_ENABLED 有効時）以外は自動的に無向になる

//#define GASHA_SINGLETON_DEBUG_ALLWAYS_TOGETHER_CPP_H//.hファイルのインクルードに伴い、常に.cpp.hファイル（および.inlファイル）を自動インクルードする場合は、このマクロを有効にする

//--------------------------------------------------------------------------------
//【ビルド構成】
//※ビルド構成を標準の状態から変えたい場合、ここで変更を行う

//【サンプル】リリースビルド時もデバッグログを有効化する（一時的な調査に活用）
#if 1
#if (defined(GASHA_BUILD_CONFIG_IS_LOCAL_RELEASE) || defined(GASHA_BUILD_CONFIG_IS_RELEASE))
	#ifndef GASHA_LOG_IS_ENABLED
		#define GASHA_LOG_IS_ENABLED//デバッグログ有効化
	#endif//GASHA_LOG_IS_ENABLED
	#ifndef GASHA_CALLPOINT_IS_ENABLED
		#define GASHA_CALLPOINT_IS_ENABLED//コールポイント機能有効化
	#endif//GASHA_CALLPOINT_IS_ENABLED
	#ifndef GASHA_PROFILE_IS_AVAILABLE
		#define GASHA_PROFILE_IS_AVAILABLE//プロファイル機能利用可能
	#endif//GASHA_PROFILE_IS_AVAILABLE
#endif//GASHA_LOG_IS_ENABLED
#endif

//【サンプル】リリースビルド時もアサーション／ブレークポイント／ウォッチポイントを有効化する（アサーションを有効化すると、必ずデバッグログが有効化するので注意）
#if 0
#if (defined(GASHA_BUILD_CONFIG_IS_LOCAL_RELEASE) || defined(GASHA_BUILD_CONFIG_IS_RELEASE))
	#ifndef GASHA_ASSERTION_IS_ENABLED
		#define GASHA_ASSERTION_IS_ENABLED//アサーション有効化
	#endif
	#ifdef GASHA_DEBUGGER_BREAK_IS_AVAILABLE//デバッガ用ブレークポイントは無効化する
		#undef GASHA_DEBUGGER_BREAK_IS_AVAILABLE
	#endif//GASHA_DEBUGGER_BREAK_IS_AVAILABLE
#endif
#endif

//【サンプル】コールポイント機能を強制的に禁止する
#if 0
#if defined(GASHA_CALLPOINT_IS_ENABLED)
	#undef GASHA_CALLPOINT_IS_ENABLED//コールポイント機能有効化
#endif//GASHA_CALLPOINT_IS_ENABLED
#endif

//【サンプル】開発ツール有効化時はプロファイル機能を強制的に禁止する
#if 0
#if defined(GASHA_PROFILE_IS_AVAILABLE) && defined(GASHA_DEV_TOOLS_IS_AVAILABLE)
	#undef GASHA_PROFILE_IS_AVAILABLE//プロファイル機能利用可能
#endif//GASHA_PROFILE_IS_AVAILABLE
#endif

#endif//GASHA_INCLUDED_PROJECT_LAST_SETTINGS_H

// End of file
